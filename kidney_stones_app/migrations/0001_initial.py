# Generated by Django 5.2.3 on 2025-06-28 06:16

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="OxalateContent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("food", models.CharField(help_text="Food item name", max_length=200)),
                (
                    "type",
                    models.CharField(help_text="Food category/type", max_length=100),
                ),
                (
                    "oxalate_mg",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Oxalate content in mg per serving",
                        max_digits=6,
                    ),
                ),
                (
                    "serving_size",
                    models.CharField(
                        help_text="Serving size description", max_length=100
                    ),
                ),
                (
                    "oxalate_level",
                    models.CharField(
                        choices=[
                            ("Low", "Low"),
                            ("Medium", "Medium"),
                            ("High", "High"),
                            ("Very High", "Very High"),
                        ],
                        help_text="Oxalate level classification",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "ordering": ["food"],
            },
        ),
        migrations.CreateModel(
            name="PatientProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "age",
                    models.IntegerField(
                        help_text="Patient age in years",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        choices=[
                            ("Male", "Male"),
                            ("Female", "Female"),
                            ("Other", "Other"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "num_prior_stones",
                    models.IntegerField(
                        help_text="Number of prior stone episodes",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(20),
                        ],
                    ),
                ),
                (
                    "first_stone_age",
                    models.IntegerField(
                        blank=True,
                        help_text="Age of first stone episode",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(120),
                        ],
                    ),
                ),
                ("family_history", models.BooleanField(default=False)),
                (
                    "bmi",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="BMI in kg/mÂ²",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(10.0),
                            django.core.validators.MaxValueValidator(50.0),
                        ],
                    ),
                ),
                ("medical_conditions", models.JSONField(blank=True, default=list)),
                ("medications", models.JSONField(blank=True, default=list)),
                (
                    "fluid_intake_L",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Daily fluid intake in liters",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.5),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SerumLabs",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "calcium_mg_dL",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Serum calcium in mg/dL",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(20.0),
                        ],
                    ),
                ),
                (
                    "intact_pth_pg_mL",
                    models.IntegerField(
                        help_text="Intact PTH in pg/mL",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "bicarbonate_mEq_L",
                    models.IntegerField(
                        help_text="Bicarbonate in mEq/L",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "potassium_mEq_L",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Serum potassium in mEq/L",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "creatinine_mg_dL",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Serum creatinine in mg/dL",
                        max_digits=4,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(20.0),
                        ],
                    ),
                ),
                (
                    "patient_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="serum_labs",
                        to="kidney_stones_app.patientprofile",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Serum labs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UrineAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "volume_L",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="24-hour urine volume in liters",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.5),
                            django.core.validators.MaxValueValidator(2.5),
                        ],
                    ),
                ),
                (
                    "ph",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="Urine pH",
                        max_digits=3,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(14.0),
                        ],
                    ),
                ),
                (
                    "calcium_mg",
                    models.IntegerField(
                        help_text="Calcium in mg/d",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "oxalate_mg",
                    models.IntegerField(
                        help_text="Oxalate in mg/d",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "phosphorus_mg",
                    models.IntegerField(
                        help_text="Phosphorus in mg/d",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "uric_acid_mg",
                    models.IntegerField(
                        help_text="Uric acid in mg/d",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "sodium_mEq",
                    models.IntegerField(
                        help_text="Sodium in mEq/d",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "potassium_mEq",
                    models.IntegerField(
                        help_text="Potassium in mEq/d",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(300),
                        ],
                    ),
                ),
                (
                    "magnesium_mg",
                    models.IntegerField(
                        help_text="Magnesium in mg/d",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "sulfate_mmol",
                    models.IntegerField(
                        help_text="Sulfate in mmol/d",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "ammonium_mmol",
                    models.IntegerField(
                        help_text="Ammonium in mmol/d",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "citrate_mg",
                    models.IntegerField(
                        help_text="Citrate in mg/d",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "cystine_mg",
                    models.IntegerField(
                        default=0,
                        help_text="Cystine in mg/d (optional)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "patient_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="urine_analyses",
                        to="kidney_stones_app.patientprofile",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Urine analyses",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ManagementPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "stone_type",
                    models.CharField(
                        choices=[
                            ("Calcium Oxalate", "Calcium Oxalate"),
                            ("Calcium Phosphate", "Calcium Phosphate"),
                            ("Uric Acid", "Uric Acid"),
                            ("Struvite", "Struvite"),
                            ("Cystine", "Cystine"),
                            ("Drug-induced", "Drug-induced"),
                            ("Unknown", "Unknown"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "urine_interpretation",
                    models.JSONField(
                        default=dict, help_text="Urine analysis interpretation"
                    ),
                ),
                (
                    "recommendations",
                    models.JSONField(
                        default=list, help_text="Management recommendations"
                    ),
                ),
                (
                    "patient_profile",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="management_plans",
                        to="kidney_stones_app.patientprofile",
                    ),
                ),
                (
                    "serum_labs",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="management_plans",
                        to="kidney_stones_app.serumlabs",
                    ),
                ),
                (
                    "urine_analysis",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="management_plans",
                        to="kidney_stones_app.urineanalysis",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]
